name: Build and Release Mobile App

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送版本标签
  workflow_dispatch:  # 手动触发
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - release

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    environment: mobile-env
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.7'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      working-directory: mobile
      run: |
        flutter pub get
        flutter packages pub run build_runner build --delete-conflicting-outputs
        
    - name: Generate build configuration
      working-directory: mobile
      run: |
        # Generate build_config.dart with actual values
        cat > lib/config/build_config.dart << EOF
        // Build-time configuration - Generated by CI/CD
        class BuildConfig {
          static const String supabaseUrl = '${{ secrets.SUPABASE_URL }}';
          static const String supabaseAnonKey = '${{ secrets.SUPABASE_ANON_KEY }}';
          static const String appName = 'GitHub Radar News';
          static const String appVersion = '1.1.6';
          
          static bool get hasValidConfig =>
              supabaseUrl != 'PLACEHOLDER_SUPABASE_URL' &&
              supabaseAnonKey != 'PLACEHOLDER_SUPABASE_ANON_KEY' &&
              supabaseUrl.isNotEmpty &&
              supabaseAnonKey.isNotEmpty;
        }
        EOF
        
        # Also create .env file as backup
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
        echo "APP_NAME=GitHub Radar News" >> .env
        echo "APP_VERSION=1.1.6" >> .env
        
    - name: Verify configuration generation (debug)
      working-directory: mobile
      run: |
        echo "=== Generated build_config.dart ==="
        cat lib/config/build_config.dart
        echo "===================================="
        echo ""
        echo "=== .env file ==="
        head -10 .env
        echo "=================="
        
    - name: Build APK
      working-directory: mobile
      run: flutter build apk --release
      
    - name: Build App Bundle
      working-directory: mobile
      run: flutter build appbundle --release
      
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: mobile/build/app/outputs/flutter-apk/app-release.apk
        
    - name: Upload App Bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-aab
        path: mobile/build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    environment: mobile-env
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.7'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      working-directory: mobile
      run: |
        flutter pub get
        flutter packages pub run build_runner build --delete-conflicting-outputs
        
    - name: Generate build configuration
      working-directory: mobile
      run: |
        # Generate build_config.dart with actual values
        cat > lib/config/build_config.dart << EOF
        // Build-time configuration - Generated by CI/CD
        class BuildConfig {
          static const String supabaseUrl = '${{ secrets.SUPABASE_URL }}';
          static const String supabaseAnonKey = '${{ secrets.SUPABASE_ANON_KEY }}';
          static const String appName = 'GitHub Radar News';
          static const String appVersion = '1.1.6';
          
          static bool get hasValidConfig =>
              supabaseUrl != 'PLACEHOLDER_SUPABASE_URL' &&
              supabaseAnonKey != 'PLACEHOLDER_SUPABASE_ANON_KEY' &&
              supabaseUrl.isNotEmpty &&
              supabaseAnonKey.isNotEmpty;
        }
        EOF
        
        # Also create .env file as backup
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
        echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
        echo "APP_NAME=GitHub Radar News" >> .env
        echo "APP_VERSION=1.1.6" >> .env
        
    - name: Verify configuration generation (debug)
      working-directory: mobile
      run: |
        echo "=== Generated build_config.dart ==="
        cat lib/config/build_config.dart
        echo "===================================="
        echo ""
        echo "=== .env file ==="
        head -10 .env
        echo "=================="
        
    - name: Setup iOS Code Signing
      env:
        DISTRIBUTION_CERT_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        DISTRIBUTION_CERT_PASSWORD: ${{ secrets.DISTRIBUTION_CERT_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        # Debug: Show current directory and script location
        echo "Current directory: $(pwd)"
        echo "Available scripts:"
        ls -la scripts/
        
        # Run the certificate import script
        echo "=== Running certificate import script ==="
        bash scripts/import-certificate.sh
        echo "=== Certificate import script completed ==="
        
        # Get provisioning profile UUID for ExportOptions
        echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > temp.mobileprovision
        export PROVISIONING_PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i temp.mobileprovision))
        rm temp.mobileprovision
        
        # Generate ExportOptions.plist with actual values
        bash scripts/generate-export-options.sh
        
        # Set up Xcode signing
        echo "=== Setting up code signing ==="
        echo "Team ID: $APPLE_TEAM_ID"
        echo "Profile UUID: $PROVISIONING_PROFILE_UUID"
        
    - name: Build iOS (Signed Release build)
      working-directory: mobile
      env:
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Clean build directory
        flutter clean
        flutter pub get
        
        # Debug: Check what happened in the certificate import step
        echo "=== POST-IMPORT KEYCHAIN STATUS ==="
        echo "Current directory: $(pwd)"
        echo "All keychains:"
        security list-keychains -d user
        echo "Checking for build.keychain..."
        ls -la "$HOME/Library/Keychains/" | grep build || echo "No build keychain found"
        
        # Ensure keychain is available for signing
        echo "Setting up keychain for Flutter build..."
        KEYCHAIN_NAME="build.keychain"
        # Use same password as import script
        KEYCHAIN_PASS="${KEYCHAIN_PASSWORD:-build_keychain_password}"
        
        # Check if keychain exists
        echo "Checking keychain status..."
        security list-keychains -d user
        
        # Set up keychain for signing
        if [ -f "$HOME/Library/Keychains/$KEYCHAIN_NAME-db" ]; then
            echo "Found keychain at: $HOME/Library/Keychains/$KEYCHAIN_NAME-db"
            security list-keychains -d user -s $KEYCHAIN_NAME login.keychain
            security default-keychain -s $KEYCHAIN_NAME
            security unlock-keychain -p "$KEYCHAIN_PASS" $KEYCHAIN_NAME
            
            # Verify certificate is available
            echo "Available signing identities in $KEYCHAIN_NAME:"
            security find-identity -v -p codesigning $KEYCHAIN_NAME
            echo "All identities in $KEYCHAIN_NAME:"
            security find-identity -v $KEYCHAIN_NAME
        else
            echo "ERROR: Keychain $KEYCHAIN_NAME not found!"
            echo "Available keychains:"
            ls -la "$HOME/Library/Keychains/"
            exit 1
        fi
        
        # Configure code signing for iOS project
        echo "Configuring iOS project for code signing..."
        cd ios
        
        # Update Runner.xcodeproj with Team ID
        sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $APPLE_TEAM_ID;/" Runner.xcodeproj/project.pbxproj || echo "Could not set DEVELOPMENT_TEAM"
        sed -i '' "s/CODE_SIGN_STYLE = .*/CODE_SIGN_STYLE = Automatic;/" Runner.xcodeproj/project.pbxproj || echo "Could not set CODE_SIGN_STYLE"
        
        cd ..
        
        # Build with code signing
        flutter build ios --release \
          --build-name=1.1.6 \
          --build-number=1
        
        # Verify the signed build
        echo "=== Verifying signed build ==="
        codesign -dvv build/ios/iphoneos/Runner.app 2>&1 | grep -E "Identifier|TeamIdentifier|Authority"
        echo "================================"
      
    - name: Create iOS IPA (Signed Distribution package)
      working-directory: mobile
      env:
        APPLE_TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        # Export signed IPA using xcodebuild
        cd ios
        
        # Archive the app
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -derivedDataPath ../build/ios/derived \
          -archivePath ../build/ios/Runner.xcarchive \
          archive \
          DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
          CODE_SIGNING_REQUIRED=YES
        
        # Export IPA from archive
        xcodebuild -exportArchive \
          -archivePath ../build/ios/Runner.xcarchive \
          -exportPath ../build/ios/ipa \
          -exportOptionsPlist ExportOptions.plist
        
        # Move and rename IPA
        mv ../build/ios/ipa/*.ipa ../../github-radar-news-ios-signed.ipa
        
        # Verify IPA creation and signing
        echo "=== Signed IPA Package Info ==="
        ls -lh ../../github-radar-news-ios-signed.ipa
        unzip -l ../../github-radar-news-ios-signed.ipa | head -20
        echo "========================"
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-ipa-signed
        path: mobile/github-radar-news-ios-signed.ipa

  create-release:
    name: Create Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./artifacts/
        
    - name: Download Android App Bundle
      uses: actions/download-artifact@v4
      with:
        name: android-aab
        path: ./artifacts/
        
    - name: Download iOS IPA
      uses: actions/download-artifact@v4
      with:
        name: ios-ipa-signed
        path: ./artifacts/
        
    - name: Get version from tag or generate
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/tags/.* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v1.3.0-beta.$(date +%Y%m%d%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Rename artifacts
      run: |
        cd artifacts
        mv app-release.apk "github-radar-news-${{ steps.version.outputs.version }}-android.apk"
        mv app-release.aab "github-radar-news-${{ steps.version.outputs.version }}-android.aab"
        mv github-radar-news-ios-signed.ipa "github-radar-news-${{ steps.version.outputs.version }}-ios.ipa"
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # GitHub Radar News ${{ steps.version.outputs.version }}
        
        ## 📱 下载移动应用
        
        ### Android
        - **APK 文件** (推荐): `github-radar-news-${{ steps.version.outputs.version }}-android.apk`
          - 适用于所有 Android 设备，直接安装即可使用
          - 最低支持 Android 6.0 (API 23)
        
        - **AAB 文件**: `github-radar-news-${{ steps.version.outputs.version }}-android.aab`  
          - 用于 Google Play Store 发布的应用包格式
          - 普通用户请下载 APK 文件
        
        ### iOS  
        - **IPA 文件**: `github-radar-news-${{ steps.version.outputs.version }}-ios.ipa`
          - 需要通过 AltStore 或其他方式侧载安装
          - 或者通过 TestFlight 分发（需要开发者账号）
        
        ## 🚀 功能特性
        
        - 📰 浏览 AI 生成的 GitHub 项目分析报告
        - 🔍 按编程语言和类型筛选内容
        - 🔄 下拉刷新获取最新内容
        - 📱 Material Design 3 界面设计
        - 🌐 直连 Supabase 数据库，实时同步
        
        ## 📋 安装说明
        
        ### Android 安装步骤
        1. 下载 APK 文件到手机
        2. 在设置中启用"未知来源"应用安装
        3. 点击 APK 文件进行安装
        4. 打开应用开始使用
        
        ### iOS 安装步骤
        1. 下载 IPA 文件
        2. 使用 AltStore、3uTools 或 Xcode 进行侧载
        3. 信任开发者证书（设置 > 通用 > VPN与设备管理）
        4. 打开应用开始使用
        
        ## 🔧 技术信息
        
        - Flutter 版本: 3.16.7
        - 最低 Android 版本: 6.0 (API 23)
        - 最低 iOS 版本: 12.0
        - 数据库: Supabase
        
        ---
        
        如有问题，请在 [GitHub Issues](https://github.com/your-username/your-repo/issues) 中反馈。
        EOF
        
        # Read the content and set it as output
        echo 'notes<<EOF' >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: GitHub Radar News ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'beta' }}
        files: |
          artifacts/github-radar-news-${{ steps.version.outputs.version }}-android.apk
          artifacts/github-radar-news-${{ steps.version.outputs.version }}-android.aab
          artifacts/github-radar-news-${{ steps.version.outputs.version }}-ios.ipa
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}